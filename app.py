from flask import Flask, request, jsonify
from flask_cors import CORS
import pandas as pd
import gspread
import google.generativeai as genai
import os
import time
import threading
import traceback
import json
import pytz # Necess√°rio para lidar com fusos hor√°rios no log

# ======================== INICIALIZA√á√ÉO E CONFIGURA√á√ÉO DA API =========================

# Inicializa o Flask
app = Flask(__name__)
# Configura o CORS para aceitar requisi√ß√µes de qualquer origem na rota /api/*
CORS(app, resources={r"/api/*": {"origins": "*"}})

# Vari√°veis globais para armazenamento de dados e sincroniza√ß√£o
# O DataFrame combinado ser√° armazenado aqui, acess√≠vel por todas as rotas
df_data = pd.DataFrame()
# O lock garante que apenas um thread acesse ou modifique df_data por vez
data_lock = threading.Lock()
# Objeto de cliente do Google Sheets
gc = None

# Constantes de Configura√ß√£o
SHEET_IDS = [
    # IDs de planilhas de exemplo
    "1oeKc3Z2O1ChhrM_SYnaJ21qg21xOqAigoFAxy9z-Hn4",
    "1HIOKU5lODnLpjLbtCo7nowrkl6sOv4Hnat6Mt6mnEPY",
    "13r_ZwpyBbdtxb7e9_EhbXiIj1ezHvdL2XsQ-PdHHL70",
    "1Jupk4ZW_wun3W8eCG6rLh8BpIBj6xqROhsLWOxW8eNQ",
    "10zWcZWDAappBSqusteHPbpOqwHNjFEn0Qil0YGuvjuQ",
    "1KsQoSXt33wwh3OSbJuRBgYVPSOSEXk3Y4vhJqhl9yc4",
    "1c49j2cIEiGHaOc35ZbJkeRXp5gw2jHcVjMOKfgQJQTw",
    "1bCWUUDuQWDCnqV2EFCWctrZH_NMZBXydT0qrmv7Xe0U",
    "1OM3Vcg_lIMlXxKvqaes90PCUUwn-RThflgewSahu4zg",
    "1N6_YgXpqRXLj5k9zRD4SWQy-KtYvmSWBy0h4rFZJ43s",
    "19Ry0WTLla1D262QxjmQ8WNVbPwMnzBKo2S1FyEEZ8WA",
    "1Sfs3bjIsNDOTmeWCwgveI61asAYyQNZPvuGFyDA7xeo"
]

# Intervalo de atualiza√ß√£o (10 minutos)
UPDATE_INTERVAL_SECONDS = 10 * 60 

# ======================== SETUP DAS CHAVES E SERVI√áOS =========================

def setup_services():
    """
    Configura o Gemini API e as credenciais do Google Sheets (gspread) 
    a partir de vari√°veis de ambiente.
    """
    global gc
    
    # 1. Configura√ß√£o do Gemini API
    # Tenta ler GOOGLE_GENAI_API_KEY (padr√£o) ou GEMINI_API_KEY (vari√°vel definida pelo usu√°rio no Render)
    gemini_key = os.environ.get("GOOGLE_GENAI_API_KEY") or os.environ.get("GEMINI_API_KEY")
    
    if gemini_key:
        try:
            genai.configure(api_key=gemini_key)
            print("‚úÖ Gemini API configurada com sucesso.")
        except Exception as e:
            print(f"‚ö†Ô∏è Falha ao configurar a API do Gemini: {e}")
    else:
        print("‚ùå Nenhuma vari√°vel de chave Gemini v√°lida (GOOGLE_GENAI_API_KEY ou GEMINI_API_KEY) encontrada. A API do Gemini n√£o funcionar√°.")

    # 2. Configura√ß√£o do gspread (Google Sheets)
    creds_json = os.environ.get("GOOGLE_CREDS_JSON")
    if creds_json:
        try:
            # Render exige que as credenciais sejam lidas de um arquivo. 
            # Criamos um arquivo tempor√°rio a partir da string JSON.
            creds_dict = json.loads(creds_json)
            temp_file = "service_account_creds.json"
            
            with open(temp_file, "w") as f:
                json.dump(creds_dict, f)
            
            # Autoriza o gspread usando o arquivo tempor√°rio
            gc = gspread.service_account(filename=temp_file)
            
            # Remove o arquivo tempor√°rio
            if os.path.exists(temp_file):
                os.remove(temp_file)
                
            print("‚úÖ Credenciais do Google Sheets (gspread) carregadas com sucesso.")

        except Exception as e:
            print(f"‚ö†Ô∏è Falha ao carregar credenciais do Google Sheets (gspread). Verifique GOOGLE_CREDS_JSON. Erro: {e}")
            traceback.print_exc()
    else:
        print("‚ùå Vari√°vel GOOGLE_CREDS_JSON n√£o encontrada. O carregamento de Sheets falhar√°.")

# ======================== FUN√á√ïES DE DADOS E CACHE =========================

def carregar_e_atualizar_dados():
    """
    Busca os dados atualizados das planilhas do Google Sheets e atualiza 
    a vari√°vel global df_data de forma segura.
    """
    global df_data
    
    if not gc:
        print("‚ö†Ô∏è gspread n√£o configurado. Imposs√≠vel buscar dados.")
        return

    dfs = []
    print("üîÑ Buscando dados atualizados no Google Sheets...")
    
    for sheet_id in SHEET_IDS:
        try:
            sh = gc.open_by_key(sheet_id)
            # L√™ todos os registros da primeira aba para um DataFrame
            df = pd.DataFrame(sh.sheet1.get_all_records())
            
            if not df.empty:
                df["Origem"] = sh.title
                dfs.append(df)
            
            # Pequeno delay para respeitar limites de taxa do Google Sheets
            time.sleep(1)  
        except Exception as e:
            print(f"‚ö†Ô∏è Falha ao ler o Sheet ID {sheet_id}: {e}")
            continue

    if dfs:
        # Combina todos os DataFrames em um √∫nico
        combined = pd.concat(dfs, ignore_index=True)
        
        # Uso do lock para garantir a escrita segura na vari√°vel global
        with data_lock:
            df_data = combined.copy()
            
        print(f"‚úÖ Dados combinados e globais atualizados. Total de linhas: {df_data.shape[0]}.")
    else:
        print("‚ùå Nenhuma planilha p√¥de ser carregada com sucesso.")


def data_refresher():
    """
    Fun√ß√£o de thread em segundo plano que carrega os dados periodicamente.
    Isso substitui a l√≥gica de cache baseada em arquivo, pois a mem√≥ria √© mais r√°pida.
    """
    # Carrega os dados na inicializa√ß√£o
    carregar_e_atualizar_dados()
    
    # Inicia o loop de atualiza√ß√£o peri√≥dica
    while True:
        # Espera o intervalo definido
        time.sleep(UPDATE_INTERVAL_SECONDS)
        
        # Loga o tempo do pr√≥ximo carregamento
        agora = pd.Timestamp.now(tz='America/Sao_Paulo')
        print(f"\n[{agora.strftime('%Y-%m-%d %H:%M:%S')}] Iniciando atualiza√ß√£o peri√≥dica de dados.")
        
        # Tenta carregar e atualizar
        try:
            carregar_e_atualizar_dados()
        except Exception as e:
            print(f"ERRO CR√çTICO NA ATUALIZA√á√ÉO DE DADOS: {e}")
            traceback.print_exc()

# ======================== FUN√á√ïES AUXILIARES DO GEMINI =========================

def gerar_resposta_gemini(pergunta, df):
    """
    Gera uma resposta anal√≠tica usando o modelo Gemini 2.0 Flash.
    Envia uma amostra dos dados e estat√≠sticas descritivas como contexto.
    """
    if df.empty:
        return "‚ùå O DataFrame est√° vazio. N√£o h√° dados para analisar."
        
    # Limita o DataFrame para o contexto (m√°ximo de 150 linhas) 
    # para economizar tokens e respeitar o limite de contexto.
    # Evite enviar DataFrames muito grandes, pois o JSON ou CSV consome muitos tokens.
    sample = df.head(150).to_csv(index=False)
    # Gera estat√≠sticas descritivas
    stats = df.describe(include='all').to_csv() if not df.empty else ""

    prompt = f"""
Voc√™ √© um analista de dados experiente em vendas e finan√ßas. Voc√™ tem acesso a dados combinados de 12 planilhas de vendas.
Responda de forma objetiva, profissional e amig√°vel √† pergunta do usu√°rio abaixo, baseando-se estritamente nos dados que voc√™ v√™.
Mantenha a resposta concisa e utilize emoji quando for apropriado.

Pergunta do usu√°rio: "{pergunta}"

Resumo estat√≠stico das colunas (incluindo contagens para n√£o num√©ricas):
{stats}

Amostra dos dados (150 linhas):
{sample}

Instru√ß√µes de an√°lise:
1. Se a pergunta for sobre contagem, m√©dia, m√°ximo/m√≠nimo, ou an√°lise de tend√™ncias (e os dados permitirem), forne√ßa o valor ou a conclus√£o diretamente.
2. Mencione quais colunas voc√™ utilizou se a an√°lise for complexa.
3. Se n√£o houver dados suficientes ou as colunas necess√°rias n√£o estiverem na amostra/estat√≠sticas, diga isso claramente.
    """

    result = {}
    
    # Worker para fazer a chamada da API com timeout
    def worker():
        try:
            model = genai.GenerativeModel("gemini-2.5-flash")
            response = model.generate_content(prompt)
            # Tenta pegar o texto, ou a representa√ß√£o string da resposta se for complexa
            result["text"] = getattr(response, "text", str(response)) 
        except Exception as e:
            result["error"] = str(e)
            traceback.print_exc()

    t = threading.Thread(target=worker)
    t.start()
    t.join(timeout=60) # Tempo limite de 60 segundos

    if t.is_alive():
        return "‚è±Ô∏è O modelo demorou demais para responder. Tente novamente ou formule uma pergunta mais simples."
    
    return result.get("text", result.get("error", "‚ùå Erro interno no servi√ßo de an√°lise de dados."))


# ======================== ROTAS DA API =========================

@app.route("/", methods=["GET"])
def home():
    """Rota de sa√∫de (Health Check) da API."""
    with data_lock:
        data_status = "carregados" if not df_data.empty else "carregando ou falhou"
        rows = df_data.shape[0] if not df_data.empty else 0
        
    return jsonify({
        "status": "API online",
        "data_source": "Google Sheets via gspread/Gemini",
        "dados_status": data_status,
        "total_linhas_carregadas": rows
    })


@app.route("/api/chat", methods=["POST"])
def chat():
    """
    Recebe a pergunta do usu√°rio e a envia para o Gemini para an√°lise, 
    usando os dados carregados globalmente.
    """
    data = request.get_json()
    pergunta = data.get("message", "")

    if not pergunta.strip():
        return jsonify({"reply": "Por favor, envie uma mensagem."}), 400

    # 1. Acesso seguro aos dados globais (sem fazer o download dos sheets!)
    with data_lock:
        current_df = df_data.copy() # Cria uma c√≥pia para o thread Gemini
    
    if current_df.empty:
        # Se falhar ao carregar tanto do cache quanto do Sheets
        return jsonify({
            "reply": "‚ùå Os dados ainda n√£o foram carregados ou o carregamento inicial falhou. Por favor, aguarde alguns segundos e tente novamente."
        })

    # 2. Gera a resposta usando o modelo Gemini
    resposta = gerar_resposta_gemini(pergunta, current_df)
    
    return jsonify({"reply": resposta})


# ======================== INICIALIZA√á√ÉO DA APLICA√á√ÉO =========================
if __name__ == "__main__":
    # Configura os servi√ßos (Gemini, Sheets)
    setup_services()
    
    # Inicia o thread de atualiza√ß√£o em segundo plano
    threading.Thread(target=data_refresher, daemon=True).start()
    
    # Define a porta, usando a vari√°vel de ambiente PORT (padr√£o Render) ou 10000
    port = int(os.environ.get("PORT", 10000))
    print(f"üöÄ Iniciando servidor Flask na porta {port}...")
    # O comando use_reloader=False √© crucial quando se usa threads customizados
    app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)
